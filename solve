#!/usr/bin/env python

import sys
import z3
import logging

from typing import List

from src.package import load_json, parse_repository, parse_command_list, \
                        parse_package_reference
from src.encode import encode, to_bools, GUESS_STEPS
from src.decode import decode
from src.expand import expand_repository, expand_commands


def main(argv: List[str]):
    logging.basicConfig(level=logging.ERROR,
                        format='%(asctime)s, %(levelname)s: %(message)s')
    # Argparse
    repository_path = argv[1]
    initial_state_path = argv[2]
    constraints_path = argv[3]

    # Parse repo
    logging.info('PART 1 - PARSE')
    raw_repo = load_json(repository_path)
    logging.info('Parsing Repository')
    unexpanded_packages = parse_repository(raw_repo)
    logging.debug('unexpanded_packages: %s', unexpanded_packages)
    logging.info('Expanding Repository')
    packages = expand_repository(unexpanded_packages)
    logging.debug('expanded_packages: %s', packages)

    # Parse constraints
    logging.info('Parsing Final State')
    raw_constraints = load_json(constraints_path)
    unexpanded_final_state_constraints = parse_command_list(raw_constraints)
    final_state_constraints = list(expand_commands(unexpanded_packages, unexpanded_final_state_constraints))
    logging.debug('final_state_constraints: %s', final_state_constraints)

    logging.info('Parsing Initial State')
    raw_initial = load_json(initial_state_path)
    initial_state = list(map(parse_package_reference, raw_initial))
    logging.debug('initial_state: %s', initial_state)

    logging.info('PART 2 - ENCODE')
    logging.info('Creating Bool Matrix')
    bools = to_bools(packages, range(GUESS_STEPS))
    logging.info('Encoding Problem')
    problem = encode(packages, initial_state, final_state_constraints, bools)
    logging.debug('SMTLib: %s', str(problem))
    logging.info('Running Z3')
    was_sat = problem.check()
    if was_sat == z3.sat:
        model = problem.model()
        logging.debug(model)
        logging.info('Decoding Model')
        commands = decode(model, bools, packages)
        commands_as_str = list(map(str, commands))
        print(commands_as_str)
    elif was_sat == z3.unknown:
        print('Unknown')
    else:
        print('Impossible')


if __name__ == '__main__':
    main(sys.argv)
